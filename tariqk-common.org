#+TITLE: Common Options for Emacs Starter Kit for Tariq Kamal (tariqk)
#+OPTIONS: toc:nil num:nil ^:nil

This is part of Tariq Kamal's common emacs configuration, with options that remain true no matter what device he's on.

This is supposed to be used with [[https://github.com/eschulte/emacs24-starter-kit/][The Literate Programming Fork of the Emacs24 Starter Kit]], and called from $hostname.org via the following, somewhere in the top of the file:

#+begin_example 
(org-babel-load-file "tariqk-common.org")
#+end_example

* What goes in here
Basically, things that:

- You use on a regular basis.
- Stuff you'd like to see replicated on ALL emacs instances you run, no matter what kind of machine.

* The Settings themselves
Actual settings go here.

+ NOTE :: Please remember that this should be common to /all/ emacs versions you run. This means stuff that run on terminals, stuff that runs on windowing systems, like that.

** Common functions

Functions used on different environments.

*** The transparent window hack
Considering how commonly this function is used across graphical GUIs, and how long the invocation appears, I figure it's best to refactor it and put it here.

#+begin_src emacs-lisp
  (defun transparent(alpha-level no-focus-alpha-level)
    "Lets you make the window transparent"
    (interactive "nAlpha level (0-100): \nnNo focus alpha level (0-100): ")
    (set-frame-parameter (selected-frame) 'alpha (list alpha-level no-focus-alpha-level))
    (add-to-list 'default-frame-alist `(alpha ,alpha-level)))
#+end_src

** Backend Stuff
How things work in the background.

*** Package Management Locations
Hey, so here's a thing I /finally/ figured out; it turns out that you /can/ extract lists from tables. With some jiggery-pokery based on [[http://stackoverflow.com/a/19775362][this StackOverflow answer]], you can have a list of repositories, like so:

#+NAME: repository-names :colnames yes
| label        | URI                                       |
|--------------+-------------------------------------------|
| GNU          | http://elpa.gnu.org/packages/             |
| elpy         | http://jorgenschaefer.github.io/packages/ |
| marmalade    | http://marmalade-repo.org/packages/       |
| MELPA        | http://melpa.org/packages/                |
| org          | http://orgmode.org/elpa/                  |
| MELPA-stable | http://stable.melpa.org/packages/         |
| original     | http://tromey.com/elpa/                   |

And then, using this, you can incorporate it, /sort of cleanly/, with this: 

#+begin_src emacs-lisp :var label=repository-names[,0] URI=repository-names[,1]
  (when (require 'package nil 'noerror)
    (progn
      (require 'cl) ; This will be sort of awkward if it doesn't exist at this point.
      (setq package-archives (pairlis label URI))
      (package-initialize))) ; reinitialize!
#+end_src

Now you /should/ be able to add, modify and delete repositories cleanly by using the org-tables format.

Or everything would break and you'd have to go back to the last commit, but hey.

*** Settings for package-pinning (common)

Here are the list of packages that /must/ be installed on /all/ Emacs instances I control, along with the apt-pinning preferences.

#+NAME: package-settings :colnames yes
| name               | repository   |
|--------------------+--------------|
| dired+             | MELPA        |
| form-feed          | MELPA-stable |
| org-bullets        | MELPA-stable |
| org-plus-contrib   | org          |
| powerline          | MELPA-stable |
| rainbow-delimiters | MELPA-stable |
| yasnippet          | MELPA-stable |
| color-theme        | MELPA        |

And do basically two things: set the package-pinning options, and then install the packages if they don't exist.

The [[http://emacs.stackexchange.com/a/17013/5509][basic solution]] is thanks to [[http://emacs.stackexchange.com/users/3889/xuchunyang][xuchunyang]] from the [[http://emacs.stackexchange.com][Emacs Stack Exchange site]], who provided me with the basic structure and pointed out my initial error in using =make-symbol= instead of =intern=, and to top it off, finished it all of in a =mapcar= and =mapc= structure to transform =name= from a list of strings to a list of symbols, thus eliminating the need to use temporary variables.

Rather than using their suggestion of manually using =package-install=, however, I'm using =starter-kit='s own =starter-kit-install-if-needed= function. It's a little more readable, at any rate, and why repeat oneself?

#+begin_src emacs-lisp :var name=package-settings[,0] repository=package-settings[,1]
  (when (require 'package nil 'noerror)
    (when (require 'cl nil 'noerror)
      (let ((pkgs (mapcar #'intern name)))
        (setq package-pinned-packages (pairlis pkgs repository))
        (mapc (lambda (pkg)
                (starter-kit-install-if-needed pkg))
              pkgs))
      (package-initialize)))
#+end_src

** Interface
How things appear on your emacs screen.

*** CUA-mode
So I grew up on Windows systems. 

While I do get /some/ of the terminology (i.e. C-k means cut everything between the cursor to EOL and put it into the kill-ring, C-y means paste the last entry from the kill-ring onto the document), I use too many Windows tools to allow me to mentally switch gears every time I change machines. So CUA-mode it is.

#+begin_src emacs-lisp
(cua-mode)
#+end_src

*** Visual-line-mode
I can't /stand/ having to muck around with linewraps while I'm writing. It's fucking annoying. So, instead, I shall use visual-line-mode.

Of course, since this annoyance really only comes during writing, and not coding, we shall only put it on in text modes. Sounds fair? Hope so.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(remove-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

*** Get rid of the toolbar and menu-bar
Takes up space only. What a waste, especially on the netbook.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

*** =rainbow-delimiters= Mode
Too many parentheses and the like mess me up. Can't have that, hence, rainbow-delimiters-mode.

Load rainbow-delim mode for both programming-modes and org-mode; mostly because org-mode has source-code blocks, and I'd like to be able to see paren matching in those blocks.

#+begin_src emacs-lisp
  (when (require 'rainbow-delimiters nil 'noerror)
    (progn
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'org-mode-hook #'rainbow-delimiters-mode)))
#+end_src

*** Custom org-faces & settings

**** Mucking about with faces
Some tweaks that don't involve color, just size, for org-mode. Also, enable syntax highlighting for blocks in org-mode. Tried that whole "colorize the =begin_src= =end_src= shit, didn't like it. Gave me eyestrain.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)  
  (custom-set-faces
   '(org-document-title
     ((t (:weight extra-bold :height 1.0)))))
#+end_src

**** Org-mode custom settings
Everything involving the most common settings for org-mode, here in the common file.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ; values that normally go under the #+STARTUP (except where mentioned) header:
   '(org-hide-leading-stars t)              ; hidestars
   '(org-startup-indented t)                ; indent
   '(org-log-done t)                        ; logdone
   '(org-pretty-entities t)                 ; entitiespretty
   '(org-export-with-sub-superscripts nil)) ; #+OPTIONS: ^:{}
#+END_SRC

*** =show-paren-mode=: Show Expressions, not just matching brackets.
Oh my GOD. From ErgoEmacs' Xah Lee, [[http://ergoemacs.org/emacs/emacs_editing_lisp.html][this trick]]:

#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'expression)
#+END_SRC

*** =form-feed-mode= activated where I need it.
Enable it for =help-mode=, =text-mode=, =emacs-lisp-mode= and =compilation-mode=. 

#+BEGIN_SRC emacs-lisp
  (when (require 'form-feed nil 'noerror)
    (progn
      (add-hook 'text-mode-hook #'form-feed-mode)
      (add-hook 'help-mode-hook #'form-feed-mode)
      (add-hook 'emacs-lisp-mode #'form-feed-mode)
      (add-hook 'compilation-mode-hook #'form-feed-mode)))
#+END_SRC

*** Make =org-bullet= install & load, put it in org-mode
Can't think of a reason why not. Why not?

#+BEGIN_SRC emacs-lisp
  (when (require 'org-bullets nil 'noerror)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Activate =powerline=
From the =powerline= [[https://github.com/milkypostman/powerline][github page]]:

#+begin_src emacs-lisp
  (when (require 'powerline nil 'noerror)
    (powerline-center-theme))
#+end_src

*** Define =prettify-symbols-alist= for =elisp-mode= and other-related modes
Really it's for *a e s t h e t i c* reasons, hahaha.

Anyway, because it'd probably be easier for myself, I'll just use the table format and work on it that way, since it's an alist, right? No harm in that.

Although at the rate this is going I /might/ just want to put the whole table-into-alist thing as a common function.

#+NAME:prettify-table :colnames yes
| token    | code |
|----------+------|
| "not"    |  172 |
| "*"      |  215 |
| "/"      |  247 |
| "->"     | 8594 |
| "map"    | 8614 |
| "/="     | 8800 |
| "<="     | 8804 |
| ">="     | 8805 |
| "lambda" |  955 |

Thanks to [[stackoverflow.com/questions/32878675/using-elisp-local-variables-instead-of-global-variables-to-add-a-function-into-a][this conversation on StackOverflow]], I've had some headway in improving this function, which now broadly works. As it turns out, Emacs Lisp uses /dynamic binding/, which is something I still am not exactly accustomed to, since I'm more used to /lexical binding/. Thanks to [[http://stackoverflow.com/users/729907/drew][Drew]] for starting me off on that direction.

In any case, [[http://stackoverflow.com/users/324105/phils][phils]]' suggestion to use =cl='s =lexical-let= instead of vanilla =let= works, so I'm keeping it at this state right now. If the conversation evolves a little more I'll see what more I can do with that.

Another next step would be to see if I can refactor the whole thing into something less repetitive, since right now I'm using it for both =lisp-interaction-mode= and =emacs-lisp-mode=. 

Ideally maybe just something that takes in a list of modes or hooks, and then for each one of those hooks, sets the =prettify-symbols-alist= to the above =prettify-table=, and activates =prettify-symbols-mode=. 

Maybe even after that, work on it some more so that it'll take different token and code tables, and then repeat it for different languages. That'll be neat.

#+begin_src emacs-lisp :var token=prettify-table[,0] code=prettify-table[,1]
  (require 'cl)

  (lexical-let (pretty)
    (setq pretty (pairlis token code))
    (add-hook 'lisp-interaction-mode-hook
              (lambda ()
                (setq prettify-symbols-alist pretty)
                (prettify-symbols-mode 1)))
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (setq prettify-symbols-alist pretty)
                (prettify-symbols-mode 1))))
#+end_src

** Activating custom =starter-kit= modules.
I can't believe I never included this in the first place. In any case, activating the =starter-kit= modules that will be used by /all/ variants of Emacs that I use.

#+begin_src emacs-lisp
  (starter-kit-load "org")
  (starter-kit-load "yasnippet")
#+end_src
