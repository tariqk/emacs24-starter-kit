#+TITLE: Common Options for Emacs Starter Kit for Tariq Kamal (tariqk)
#+OPTIONS: toc:nil num:nil ^:nil

This is part of Tariq Kamal's common emacs configuration, with options that remain true no matter what device he's on.

This is supposed to be used with [[https://github.com/eschulte/emacs24-starter-kit/][The Literate Programming Fork of the Emacs24 Starter Kit]], and called from $hostname.org via the following, somewhere in the top of the file:

#+begin_example 
(org-babel-load-file "tariqk-common.org")
#+end_example

* What goes in here
Basically, things that:

- You use on a regular basis.
- Stuff you'd like to see replicated on ALL emacs instances you run, no matter what kind of machine.

* The Settings themselves
Actual settings go here.

+ NOTE :: Please remember that this should be common to /all/ emacs versions you run. This means stuff that run on terminals, stuff that runs on windowing systems, like that.

** Interface
How things appear on your emacs screen.

*** CUA-mode
So I grew up on Windows systems. 

While I do get /some/ of the terminology (i.e. C-k means cut everything between the cursor to EOL and put it into the kill-ring, C-y means paste the last entry from the kill-ring onto the document), I use too many Windows tools to allow me to mentally switch gears every time I change machines. So CUA-mode it is.

#+begin_src emacs-lisp
(cua-mode)
#+end_src

*** Visual-line-mode
I can't /stand/ having to muck around with linewraps while I'm writing. It's fucking annoying. So, instead, I shall use visual-line-mode.

Of course, since this annoyance really only comes during writing, and not coding, we shall only put it on in text modes. Sounds fair? Hope so.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(remove-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

*** The transparent window hack
This violates the rule for putting things that only matter on all machines, but the calling of this defun should only happen in emacs instances in windowing systems. In the mean-time, since this code is so common across a lot of OSes, might as well define it here.

#+begin_src emacs-lisp
  (defun transparent(alpha-level no-focus-alpha-level)
    "Lets you make the window transparent"
    (interactive "nAlpha level (0-100): \nnNo focus alpha level (0-100): ")
    (set-frame-parameter (selected-frame) 'alpha (list alpha-level no-focus-alpha-level))
    (add-to-list 'default-frame-alist `(alpha ,alpha-level)))
#+end_src

*** Get rid of the toolbar and menu-bar
Takes up space only. What a waste, especially on the netbook.

#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src

*** Rainbow Delimiters Mode
Too many parentheses and the like mess me up. Can't have that, hence, rainbow-delimiters-mode.

However, before we start, we make sure that the package is already installed:

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'rainbow-delimiters)
    (package-install 'rainbow-delimiters))
#+END_SRC

Load rainbow-delim mode for both programming-modes and org-mode; mostly because org-mode has source-code blocks, and I'd like to be able to see paren matching in those blocks.

#+begin_src emacs-lisp
  (when (require 'rainbow-delimiters nil 'noerror)
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'org-mode-hook 'rainbow-delimiters-mode)))
#+end_src

*** Custom org-faces & settings

**** Mucking about with faces
Some tweaks that don't involve color, just size, for org-mode. Also, enable syntax highlighting for blocks in org-mode. Tried that whole "colorize the =begin_src= =end_src= shit, didn't like it. Gave me eyestrain.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)  
  (custom-set-faces
   '(org-document-title
     ((t (:weight extra-bold :height 1.0)))))
#+end_src

**** Org-mode custom settings
Everything involving the most common settings for org-mode, here in the common file.

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ; values that normally go under the #+STARTUP (except where mentioned) header:
   '(org-hide-leading-stars t)              ; hidestars
   '(org-startup-indented t)                ; indent
   '(org-log-done t)                        ; logdone
   '(org-pretty-entities t)                 ; entitiespretty
   '(org-export-with-sub-superscripts nil)) ; #+OPTIONS: ^:{}
#+END_SRC

*** =show-paren-mode=: Show Expressions, not just matching brackets.
Oh my GOD. From ErgoEmacs' Xah Lee, [[http://ergoemacs.org/emacs/emacs_editing_lisp.html][this trick]]:

#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'expression)
#+END_SRC

*** =form-feed-mode= activated where I need it.

Okay, all of this presumes =form-feed= is installed, but if it is, enable it for =help-mode=, =text-mode= and =compilation-mode=. 

I think I'll activate =form-feed-mode= only when I need to on specific machines, since only some interpreters and compilers recognize the form-feed character.

#+BEGIN_SRC emacs-lisp
  (when (require 'form-feed nil 'noerror)
    (progn
      (add-hook 'text-mode-hook #'form-feed-mode)
      (add-hook 'help-mode-hook #'form-feed-mode)
      (add-hook 'compilation-mode-hook #'form-feed-mode)))
#+END_SRC

** Backend Stuff
How things work in the background.

*** Package Management Locations
I never knew that org-mode got its own package library. So cool. But what was missing from the whole list was MELPA. Where can liddat, where can?

This does mean that package loads twice. Ehh, should be no problem, right?

#+begin_src emacs-lisp
  (when (require 'package nil 'noerror)
    (progn
      (setq package-archives '(
       ;; If it isn't obvious, the format is like this:
       ;;                  ("archive-name" . "repo URL")
                           ("ori" . "http://tromey.com/elpa/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")
                           ("MELPA" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")
                           ))
      (package-initialize))) ; reinitialize!
#+end_src
