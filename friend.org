#+TITLE: Configuration Specific To Tariq's HP Pavilion Desktop.
#+STARTUP: indent hidestars
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args :results silent

So this is basically the configuration file for friend, the HP Pavilion Desktop running Debian Jessie, formally Crunchbang Waldorf. Dual-screen monitor setup.

* Before we begin
Anyway, as with all hostname-specific machines, this little fella runs the following code to load the common features I expect from all my emacs instances:

#+begin_src emacs-lisp
(org-babel-load-file (expand-file-name "tariqk-common.org" starter-kit-dir))
#+end_src

* Download some pre-requisites
Now, the common-files should have done the following:

- Loaded the compulsory modules that are common to all machines
- Populated the =package-pinned-packages= variables.

But that's for what's common in all machines. These are the packages that need to be installed on friend desktop:

#+NAME: package-settings 
| name                  | repository   |
|-----------------------+--------------|
| ac-js2                | MELPA-stable |
| coffee-mode           | MELPA-stable |
| color-theme-solarized | MELPA        |
| cython-mode           | MELPA-stable |
| docker                | MELPA        |
| docker-tramp          | MELPA        |
| dockerfile-mode       | MELPA-stable |
| elpy                  | elpy         |
| js2-mode              | MELPA-stable |
| json-mode             | MELPA-stable |
| lua-mode              | MELPA-stable |
| pandoc-mode           | MELPA-stable |
| pydoc-info            | MELPA        |

And now, to do what we did in =tariqk-common=: add /these/ package-pinning options, and then install them if they don't exist:

#+begin_src emacs-lisp :var name=package-settings[,0] repository=package-settings[,1] :colnames yes
  (when (require 'package nil 'noerror)
    (when (require 'cl nil 'noerror)
      (lexical-let ((pkgs (mapcar #'intern name))
                    (original))
        (setq original package-pinned-packages)
        (setq package-pinned-packages (append original (pairlis pkgs repository)))
        (apply 'starter-kit-install-if-needed pkgs))
        (package-initialize)))
#+end_src  

* What goes in here
Settings for emacs specific to HP Pavilion Desktop, running CrunchBang Waldorf, with the OpenBox Window Manager. This configuration assumes a display area of 1600 Ã— 900, 500 GB HDD, 250 GB SDD, 4 GB RAM, and a (presumably, I can't tell) x64 Intel Core Duo i3 Processor.

* The Settings themselves
Actual settings go here.

The goals of these settings is to:
- Maximize screen real estate.
- Minimize eye strain.

** Custom faces
Use the font that is available for the system.

#+begin_src emacs-lisp
(custom-set-faces
'(default ((t (:foundry "unknown" :family "Liberation Mono" :height 100)))))
#+end_src

** Window Setup The Way I Like It (Here)
Basically, let's keep it transparent, and let's put in a color scheme.

#+begin_src emacs-lisp
  (when (require 'color-theme nil 'noerror)
    (progn
      (when (require 'color-theme-solarized nil 'noerror)
        (color-theme-solarized-dark))
      (*hx-transparent 85 85)
      (toggle-frame-maximized)))
#+end_src

#+RESULTS:

** Stuff for development
Since I'm using this computer to develop projects, here are some language-specific settings for specific packages.

*** Org-mode

Some custom settings for this desktop computer, since I'm more likely to run code blocks here than on other computers (for now):

#+name: languages-to-run-in-org
- sh
- emacs-lisp

Again, use the same old trick that we've used before:

#+begin_src emacs-lisp :var languages=languages-to-run-in-org[,0]
  (when (require 'org nil 'noerror)
    (when (require 'cl nil 'noerror)
      (let ((langs (mapcar #'intern languages)))
        (org-babel-do-load-languages
         'org-babel-load-languages
         (pairlis langs (make-list (length langs) t))))))
#+end_src

*** Python
Code for Python.

**** Enable =starter-kit= for python
=starter-kit= has some support for the Python language, and after thinking about it, I don't think adding it into our setup should be too harmful.

#+BEGIN_SRC emacs-lisp
  (starter-kit-load "python")
#+END_SRC

**** Enable =elpy-mode= and add =elpy= repository.
Basically, enable =elpy=.

The source for this comes from the [[https://github.com/jorgenschaefer/elpy][elpy github page]].

#+begin_src emacs-lisp
  (when (require 'package nil 'noerror)
    (progn
      (when (require 'elpy nil 'noerror)
        (elpy-enable))))
#+end_src

**** Enabling =whitespace-mode= for python editing, and automatic =whitespace-cleanup=.
Activate =whitespace-mode=, because Python /is/ very picky about whitespace.

Am noticing the vector thing, and I'm wondering if I can't just export that as an =org-table=.

#+begin_src emacs-lisp
  (when (require 'whitespace nil 'noerror)
        (setq whitespace-display-mappings
              '((newline-mark 10 [182 10])))
        (add-hook 'python-mode-hook whitespace-mode))
#+end_src

And after that, allow emacs to cleanup whitespace after you modify a file, at least for Python. [[https://www.gc3.uzh.ch/blog/Whitespace_cleanup_with_Emacs/][Reference]], but removed that second =defun= and replaced it with a lambda, because it's a pain to get right.

#+begin_src emacs-lisp
  (when (require 'whitespace nil 'noerror)
    (defun whitespace-cleanup+ ()
      (let* ((modified-before-p (buffer-modified-p)))
        (whitespace-cleanup)
        (if (not modified-before-p)
            (not-modified))))
    (add-hook 'python-mode-hook (lambda ()
                                  (add-hook 'write-contents-hooks #'whitespace-cleanup+))))
#+end_src

**** =pygame=-specific settings.
Right now it's just settings for putting in documentation for the latest version of =pygame= (from the website).

#+begin_src emacs-lisp
  (when (require 'pydoc-info nil 'noerror)
    (info-lookup-add-help :mode 'python-mode :parse-rule 'pydoc-info-puthon-symbol-at-point
                          :doc-spec '(("(python)Index" pydoc-info-lookup-transform-entry)
                                      ("(pygame)Index" pydoc-info-lookup-transform-entry))))
#+end_src

***** How I installed =pygame='s documents and =python= 2.7.3's documentation with minimal tears.
Well, this is for posterity's sake, but this set of instructions:

1. Installs the info documentation for =python= 2.7.3 (which is what Crunchbang Waldorf / Debian Wheezy uses).
   - DONE (on [2015-10-04 Sun 00:41]) :: install documentation for =python= 2.7.9, which is what Debian Jessie uses.
2. Installs the info documentation for =pygame= development branch, dated <2015-02-15 Sun 15:26>.

What this requires:

- =bash=
- =pip=
- =virtualenv=
- Access to =sudo=

#+begin_src sh :tangle no
  #!/bin/bash

  cd /tmp  # do the installation in the tmp directory.
  mkdir python-pygame-docs
  virtualenv python-pygame-docs/ # create the python virtual environment
  cd python-pygame-docs/

  # activate the virtual environment; now nothing touches the main system
  . bin/activate 

  # install latest sphinx dev version...
  pip install https://bitbucket.org/jonwaltman/sphinx-info/get/51850bb9b7a1.zip

  # download and untar required python release (2.7.9)

  wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tar.bz2
  tar xf Python-2.7.9.tar.bz2

  # Move to the source documentation, and prepare the conf.py file
  cd Python-2.7.9/Doc
  cat <<HABIS_DAH_YEY >> conf.py

  texinfo_documents = [
      ('contents', 'python', 'Python Documentation', _stdauthor,
       'Python', 'The Python Documentation', 'Software Development'),
  ]

  HABIS_DAH_YEY

  # Generate the Texinfo file, build the Info files and install it:
  mkdir -p build/texinfo build/doctrees
  sphinx-build -b texinfo -d build/doctrees . build/texinfo
  cd build/texinfo
  makeinfo --no-split python.texi
  sudo cp python.info /usr/share/info
  sudo ginstall-info --info-dir=/usr/share/info python.info # install-info is now ginstall-info

  # back to root directory...

  cd /tmp/python-pygame-docs/

  # download and unzip latest pygame release (as of 2015-02-19).
  wget https://bitbucket.org/pygame/pygame/get/db5966ca2b4d.zip
  unzip db5966ca2b4d.zip

  # Move to the reST source documents, and prepare the conf.py file
  cd pygame-pygame-db5966ca2b4d/docs/reST/
  cat <<HABIS_DAH_YEY >> conf.py

  texinfo_documents = [
      ('index', 'pygame', u'Pygame Documentation', u'Pygame Developers',
       'Pygame', u'The Pygame Documentation', u'Software Development')
  ]

  HABIS_DAH_YEY
    
  # Generate the Texinfo file, build the Info file and install it
  mkdir -p build/texinfo build/doctrees
  sphinx-build -b texinfo -d build/doctrees . build/texinfo
  cd build/texinfo
  makeinfo --no-split pygame.texi
  sudo cp pygame.info /usr/share/info
  sudo ginstall-info --info-dir=/usr/share/info pygame.info # install-info is now ginstall-info
  info pygame # test it out

  # Cleanup

  deactivate
  cd ~
  rm -rf /tmp/python-pygame-docs
#+end_src

Update for [2015-10-03 Sat 16:10]:

Upgrading to Python 2.7.9 is as follows:

#+begin_src sh :tangle no
  #!/bin/bash

  cd /tmp  # do the installation in the tmp directory.
  mkdir python-pygame-docs
  virtualenv python-pygame-docs/ # create the python virtual environment
  cd python-pygame-docs/

  # activate the virtual environment; now nothing touches the main system
  . bin/activate 

  # install latest sphinx dev version...
  pip install https://bitbucket.org/jonwaltman/sphinx-info/get/51850bb9b7a1.zip

  # download and untar required python release (2.7.9)

  wget -t 0 https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tar.xz
  tar xf Python-2.7.9.tar.xz

  # Move to the source documentation, and prepare the conf.py file
  cd Python-2.7.9/Doc
  cat <<HABIS_DAH_YEY >> conf.py

  texinfo_documents = [
      ('contents', 'python', 'Python Documentation', _stdauthor,
       'Python', 'The Python Documentation', 'Software Development'),
  ]

  HABIS_DAH_YEY

  # Uninstall the old Info file, generate the new Texinfo file, build the Info files and install it:
  mkdir -p build/texinfo build/doctrees
  sphinx-build -b texinfo -d build/doctrees . build/texinfo
  cd build/texinfo
  makeinfo --no-split python.texi
  sudo ginstall-info --remove --info-dir=/usr/share/info --info-file=python.info
  sudo cp python.info /usr/share/info
  sudo ginstall-info --info-dir=/usr/share/info --info-file=python.info
#+end_src

#+RESULTS:

*** Javascript
Code for Javascript

**** Install =js2-mode= and =ac-js2=

Based on [[https://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/][this recommendation]].

***** Configure and setup =js2-mode=

Add the necessary hooks to load when loading JavaScript files. As stated in the reference, =js2-mode= has four levels of highlighting. We're using level 4.

#+begin_src emacs-lisp
  (when (require 'js2-minor-mode nil 'noerror)
    (add-hook 'js-mode-hook #'js2-minor-mode)
    (setq js2-highlight-level 3)
    (when (require 'ac-js2-mode nil 'noerror)
      (add-hook 'js2-mode-hook #'ac-js2-mode)))
#+end_src

*** CoffeeScript
Setup for CoffeeScript.

Actually, since everything's been moved up the config file, nothing special here, yet.

**** DONE Rethink how packages are installed
CLOSED: <2015-09-30 Wed>

UPDATE :: This is done as of commit =a6e7979=.

One thing's come over me when I look at the above code: =package-pinned-packages= and the =melpa-stable= repository, located [[http://stable.melpa.org/packages/][here]].

I think what I /do/ want to do is:

1. Put in =melpa-stable= as a valid destination point in the repos.
2. Make sure that most of the packages installed use, /by default/, =melpa-stable=, if possible:
   + List down all the packages used
   + Uninstall all the packages
   + Reinstall using correct values.
3. Find some way of centralizing this, and using only /one/ call to =starter-kit-install-if-needed=.

*** Pandoc

Not really a language, but a software tool that converts different markdown formats to other markdown formats.

Based on the Installation notes found [[http://joostkremers.github.io/pandoc-mode/][here]], we're going to load =pandoc-mode= every time a text file is open, but /only/ if there are settings files:

#+begin_src emacs-lisp :tangle yes
  (starter-kit-install-if-needed 'pandoc-mode)
  (add-hook 'text-mode-hook 'conditionally-turn-on-pandoc)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src
