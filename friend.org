#+TITLE: Configuration Specific To Tariq's HP Pavilion Desktop.
#+STARTUP: indent hidestars
#+OPTIONS: toc:nil num:nil ^:nil

So this is basically the configuration file for friend, the HP Pavilion Desktop running Crunchbang Waldorf. Dual-screen monitor setup.

* Before we begin
Anyway, as with all hostname-specific machines, this little fella runs the following code to load the common features I expect from all my emacs instances:

#+begin_src emacs-lisp
(org-babel-load-file (expand-file-name "tariqk-common.org" starter-kit-dir))
#+end_src

* What goes in here
Settings for emacs specific to HP Pavilion Desktop, running CrunchBang Waldorf, with the OpenBox Window Manager. This configuration assumes a display area of 1600 Ã— 900, 500 GB HDD, 250 GB SDD, 4 GB RAM, and a (presumably, I can't tell) x64 Intel Core Duo i3 Processor.

* The Settings themselves
Actual settings go here.

The goals of these settings is to:
- Maximize screen real estate.
- Minimize eye strain.

** Custom faces
Use the font that is available for the system.

#+begin_src emacs-lisp
(custom-set-faces
'(default ((t (:foundry "unknown" :family "Liberation Mono" :height 100)))))
#+end_src

** Window Setup The Way I Like It (Here)
Basically, let's keep it transparent, and let's put in a color scheme.

#+begin_src emacs-lisp
  (when (require 'color-theme nil 'noerror)
    (progn
      (color-theme-solarized-dark)
      (*hx-transparent 85 85)
      (toggle-frame-maximized)))
#+end_src

#+RESULTS:

** Stuff for development
Since I'm using this computer to develop projects, here are some language-specific settings for specific packages.

*** Python
Code for Python.

**** Install =cython-mode=
=starter-kit-python= has a bit about =cython-mode= that I think I want. So I'll install this pre-emptively so that I can get it.

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'cython-mode)
#+END_SRC

**** Enable =starter-kit= for python
=starter-kit= has some support for the Python language, and after thinking about it, I don't think adding it into our setup should be too harmful.

#+BEGIN_SRC emacs-lisp
  (starter-kit-load "python")
#+END_SRC
**** Enable =elpy-mode= and add =elpy= repository.

Basically this does three things:

1. If =elpy-mode= isn't installed, install it.
2. Enable it.

The source for this comes from the [[https://github.com/jorgenschaefer/elpy][elpy github page]].

#+begin_src emacs-lisp
  (when (require 'package nil 'noerror)
    (progn
      (starter-kit-install-if-needed 'elpy)
      (when (require 'elpy nil 'noerror)
        (elpy-enable))))
#+end_src

**** Including =form-feed-mode= for =elpy-mode=

And now, since ^L is allowed thanks to PEP-8, including form-feed mode to the Python-developing mode I most frequent:

#+begin_src emacs-lisp
  (when (require 'form-feed nil 'noerror)
    (add-hook 'python-mode-hook form-feed-mode))
#+end_src

**** Enabling =whitespace-mode= for python editing, and automatic =whitespace-cleanup=.

Since Python is sensitive about whitespace, why not?

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook whitespace-mode)
  (setq whitespace-display-mappings
        '(
          (newline-mark 10 [182 10])
          ))
#+end_src

And after that, allow emacs to cleanup whitespace after you modify a file, at least for Python. [[https://www.gc3.uzh.ch/blog/Whitespace_cleanup_with_Emacs/][Reference]].

#+begin_src emacs-lisp
  (defun whitespace-cleanup* ()
    (let* ((modified-before-p (buffer-modified-p)))
      (whitespace-cleanup)
      (if (not modified-before-p)
          (not-modified))))

  (defun whitespace-cleanup-on-save ()
    (add-hook 'write-contents-hooks #'whitespace-cleanup))

  (add-hook 'python-mode-hook #'whitespace-cleanup-on-save)
#+end_src

**** =pygame=-specific settings.

Right now it's just settings for putting in documentation for the latest version of =pygame= (from the website).

#+begin_src emacs-lisp
  (when (require 'pydoc-info nil 'noerror)
    (info-lookup-add-help :mode 'python-mode :parse-rule 'pydoc-info-puthon-symbol-at-point
                          :doc-spec '(("(python)Index" pydoc-info-lookup-transform-entry)
                                      ("(pygame)Index" pydoc-info-lookup-transform-entry))))
#+end_src

**** How I installed =pygame='s documents and =python= 2.7.3's documentation with minimal tears.

Well, this is for posterity's sake, but this:

- Installs the info documentation for =python= 2.7.3 (which is what Crunchbang Waldorf / Debian Wheezy uses).
- Installs the info documentation for =pygame= development branch, dated <2015-02-15 Sun 15:26>.

What this requires:

- =bash=
- =pip=
- =virtualenv=
- Access to =sudo=

#+begin_src sh :tangle no
  #!/bin/bash

  cd /tmp  # do the installation in the tmp directory.
  mkdir python-pygame-docs
  virtualenv python-pygame-docs/ # create the python virtual environment
  cd python-pygame-docs/

  # activate the virtual environment; now nothing touches the main system
  . bin/activate 

  # install latest sphinx dev version...
  pip install https://bitbucket.org/jonwaltman/sphinx-info/get/51850bb9b7a1.zip

  # download and untar required python release (2.7.3)

  wget https://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2
  tar xf Python-2.7.3.tar.bz2

  # Move to the source documentation, and prepare the conf.py file
  cd Python-2.7.3/Doc
  cat <<HABIS_DAH_YEY >> conf.py

  texinfo_documents = [
      ('contents', 'python', 'Python Documentation', _stdauthor,
       'Python', 'The Python Documentation', 'Software Development'),
  ]

  HABIS_DAH_YEY

  # Generate the Texinfo file, build the Info files and install it:
  mkdir -p build/texinfo build/doctrees
  sphinx-build -b texinfo -d build/doctrees . build/texinfo
  cd build/texinfo
  makeinfo --no-split python.texi
  sudo cp python.info /usr/share/info
  sudo ginstall-info --info-dir=/usr/share/info python.info # install-info is now ginstall-info

  # back to root directory...

  cd /tmp/python-pygame-docs/

  # download and unzip latest pygame release (as of 2015-02-19).
  wget https://bitbucket.org/pygame/pygame/get/db5966ca2b4d.zip
  unzip db5966ca2b4d.zip

  # Move to the reST source documents, and prepare the conf.py file
  cd pygame-pygame-db5966ca2b4d/docs/reST/
  cat <<HABIS_DAH_YEY >> conf.py

  texinfo_documents = [
      ('index', 'pygame', u'Pygame Documentation', u'Pygame Developers',
       'Pygame', u'The Pygame Documentation', u'Software Development')
  ]

  HABIS_DAH_YEY
    
  # Generate the Texinfo file, build the Info file and install it
  mkdir -p build/texinfo build/doctrees
  sphinx-build -b texinfo -d build/doctrees . build/texinfo
  cd build/texinfo
  makeinfo --no-split pygame.texi
  sudo cp pygame.info /usr/share/info
  sudo ginstall-info --info-dir=/usr/share/info pygame.info # install-info is now ginstall-info
  info pygame # test it out

  # Cleanup

  deactivate
  cd ~
  rm -rf /tmp/python-pygame-docs
#+end_src

*** Javascript
Code for Javascript

**** Install =js2-mode= and =ac-js2=

Based on [[https://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/][this recommendation]], first we begin by installing =js2-mode= and =ac-js2=. Rather than manually installing it using =package=, let's take advantage of what =starter-kit= provides.

#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'js2-mode 'ac-js2)
#+end_src

***** Configure and setup =js2-mode=

Add the necessary hooks to load when loading JavaScript files. As stated in the reference, =js2-mode= has four levels of highlighting. We're using level 4.

#+begin_src emacs-lisp
  (when (require 'js2-minor-mode nil 'noerror)
    (add-hook 'js-mode-hook js2-minor-mode)
    (setq js2-highlight-level 3)
    (when (require 'ac-js2-mode nil 'noerror)
      (add-hook 'js2-mode-hook ac-js2-mode)))
#+end_src

Everything else looks like Too Much Work and not enough brain-width right now. I'll work on it later.
*** CoffeeScript
Setup for CoffeeScript.

Some notes from the [[https://github.com/defunkt/coffee-mode][coffee-mode github page]]:

#+begin_quote

*Please do not install [[http://elpa.gnu.org/][GNU Emacs Lisp Package Archive]] version.*

It's too old and many features(Block string, block comment etc) are not implemented.

#+end_quote

So, ok. We won't. But how?

Based on [[http://www.lonecpluspluscoder.com/2014/11/using-elpa-pinned-packages-gnu-emacs-24-4/][this page]], by first pinning =coffee-mode= to the =MELPA= repository:

#+begin_src emacs-lisp
  (when (boundp 'package-pinned-packages)
    (add-to-list 'package-pinned-packages
                 '(coffee-mode . "MELPA-stable")))
  (package-initialize)
  (starter-kit-install-if-needed 'coffee-mode)
#+end_src

**** DONE Rethink how packages are installed
CLOSED: <2015-09-30 Wed>

UPDATE :: This is done as of commit =a6e7979=.

One thing's come over me when I look at the above code: =package-pinned-packages= and the =melpa-stable= repository, located [[http://stable.melpa.org/packages/][here]].

I think what I /do/ want to do is:

1. Put in =melpa-stable= as a valid destination point in the repos.
2. Make sure that most of the packages installed use, /by default/, =melpa-stable=, if possible:
   + List down all the packages used
   + Uninstall all the packages
   + Reinstall using correct values.
3. Find some way of centralizing this, and using only /one/ call to =starter-kit-install-if-needed=.

*** Pandoc

Not really a language, but a software tool that converts different markdown formats to other markdown formats.

Based on the Installation notes found [[http://joostkremers.github.io/pandoc-mode/][here]], we're going to load =pandoc-mode= every time a text file is open, but /only/ if there are settings files:

#+begin_src emacs-lisp :tangle yes
  (starter-kit-install-if-needed 'pandoc-mode)
  (add-hook 'text-mode-hook 'conditionally-turn-on-pandoc)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src
